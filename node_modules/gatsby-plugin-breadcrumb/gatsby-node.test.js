"use strict";

var _gatsbyNode = require("./gatsby-node");
var actions = {
  createPage: jest.fn(),
  deletePage: jest.fn()
};
var mockPageShortPath = {
  path: '/test',
  context: {}
};
var mockPageEmptyPath = {
  path: '/test//'
};
var mockPageLongPath = {
  path: '/long/test'
};
var mockPathExcluded = {
  path: '/404/test.html'
};
var mockPathHTML = {
  path: '/long/404.html'
};
var calledWithShort = {
  path: '/test',
  context: {
    breadcrumb: {
      crumbs: [{
        crumbLabel: 'Home',
        pathname: '/'
      }, {
        crumbLabel: 'test',
        pathname: '/test'
      }],
      location: '/test'
    }
  }
};
var calledWithEmptyPath = {
  path: '/test//',
  context: {
    breadcrumb: {
      crumbs: [{
        crumbLabel: 'Home',
        pathname: '/'
      }, {
        crumbLabel: 'test',
        pathname: '/test'
      }],
      location: '/test//'
    }
  }
};
var calledWithLong = {
  path: '/long/test',
  context: {
    breadcrumb: {
      crumbs: [{
        crumbLabel: 'Home',
        pathname: '/'
      }, {
        crumbLabel: 'long',
        pathname: '/long'
      }, {
        crumbLabel: 'test',
        pathname: '/long/test'
      }],
      location: '/long/test'
    }
  }
};
var calledWithLongLabelUpdates = {
  path: '/long/test',
  context: {
    breadcrumb: {
      crumbs: [{
        crumbLabel: 'Home',
        pathname: '/'
      }, {
        crumbLabel: 'LONG',
        pathname: '/long'
      }, {
        crumbLabel: 'test',
        pathname: '/long/test'
      }],
      location: '/long/test'
    }
  }
};
var calledWithTrailingSlashes = {
  path: '/long/test',
  context: {
    breadcrumb: {
      crumbs: [{
        crumbLabel: 'Home',
        pathname: '/'
      }, {
        crumbLabel: 'long',
        pathname: '/long/'
      }, {
        crumbLabel: 'test',
        pathname: '/long/test/'
      }],
      location: '/long/test'
    }
  }
};
var calledWithTrailingSlashesLabelUpdates = {
  path: '/long/test',
  context: {
    breadcrumb: {
      crumbs: [{
        crumbLabel: 'Home',
        pathname: '/'
      }, {
        crumbLabel: 'LONG',
        pathname: '/long/'
      }, {
        crumbLabel: 'test',
        pathname: '/long/test/'
      }],
      location: '/long/test'
    }
  }
};
var calledWithTrailingSlashesLabelUpdatesHTMLExt = {
  path: '/long/404.html',
  context: {
    breadcrumb: {
      crumbs: [{
        crumbLabel: 'Home',
        pathname: '/'
      }, {
        crumbLabel: 'LONG',
        pathname: '/long/'
      }, {
        crumbLabel: '404.html',
        pathname: '/long/404.html'
      }],
      location: '/long/404.html'
    }
  }
};
afterEach(function () {
  actions.createPage.mockClear();
  actions.deletePage.mockClear();
});
describe('AutoGen crumbs: ', function () {
  it('should generate no crumbs, excluded path', function () {
    (0, _gatsbyNode.onCreatePage)({
      page: mockPathExcluded,
      actions: actions
    }, {
      useAutoGen: true,
      exclude: ['**/404/**', '**/*.html', '**/test.????', '**/*?m?', '**']
    });
    expect(actions.deletePage).toHaveBeenCalledTimes(0);
    expect(actions.createPage).toHaveBeenCalledTimes(0);
  });
  it('should generate autogen crumbs short path', function () {
    (0, _gatsbyNode.onCreatePage)({
      page: mockPageShortPath,
      actions: actions
    }, {
      useAutoGen: true
    });
    expect(actions.deletePage).toHaveBeenCalledTimes(1);
    expect(actions.deletePage).toHaveBeenCalledWith(mockPageShortPath);
    expect(actions.createPage).toHaveBeenCalledTimes(1);
    expect(actions.createPage).toHaveBeenCalledWith(calledWithShort);
  });
  it('should generate autogen crumbs excluding empty crumb', function () {
    (0, _gatsbyNode.onCreatePage)({
      page: mockPageEmptyPath,
      actions: actions
    }, {
      useAutoGen: true
    });
    expect(actions.deletePage).toHaveBeenCalledTimes(1);
    expect(actions.deletePage).toHaveBeenCalledWith(mockPageEmptyPath);
    expect(actions.createPage).toHaveBeenCalledTimes(1);
    expect(actions.createPage).toHaveBeenCalledWith(calledWithEmptyPath);
  });
  it('should generate autogen crumbs long path', function () {
    (0, _gatsbyNode.onCreatePage)({
      page: mockPageLongPath,
      actions: actions
    }, {
      useAutoGen: true
    });
    expect(actions.deletePage).toHaveBeenCalledTimes(1);
    expect(actions.deletePage).toHaveBeenCalledWith(mockPageLongPath);
    expect(actions.createPage).toHaveBeenCalledTimes(1);
    expect(actions.createPage).toHaveBeenCalledWith(calledWithLong);
  });
  it('should generage crumbs using pathPrefix', function () {
    (0, _gatsbyNode.onCreatePage)({
      page: mockPageShortPath,
      actions: actions,
      pathPrefix: '/blog'
    }, {
      useAutoGen: true
    });
    expect(actions.deletePage).toHaveBeenCalledTimes(1);
    expect(actions.deletePage).toHaveBeenCalledWith(mockPageShortPath);
    expect(actions.createPage).toHaveBeenCalledTimes(1);
    expect(actions.createPage).toHaveBeenCalledWith(calledWithShort);
  });
  it('should generate crumbs with update path crumb labels', function () {
    (0, _gatsbyNode.onCreatePage)({
      page: mockPageLongPath,
      actions: actions
    }, {
      useAutoGen: true,
      crumbLabelUpdates: [{
        pathname: '/long',
        crumbLabel: 'LONG'
      }]
    });
    expect(actions.deletePage).toHaveBeenCalledTimes(1);
    expect(actions.deletePage).toHaveBeenCalledWith(mockPageLongPath);
    expect(actions.createPage).toHaveBeenCalledTimes(1);
    expect(actions.createPage).toHaveBeenCalledWith(calledWithLongLabelUpdates);
  });
  it('should not generate auto crumbs, no useAutoGen', function () {
    (0, _gatsbyNode.onCreatePage)({
      page: {
        path: '/test',
        context: {}
      },
      actions: actions
    }, {});
    expect(actions.deletePage).not.toHaveBeenCalled();
    expect(actions.createPage).not.toHaveBeenCalled();
  });
  it('should not generate auto crumbs, exlude', function () {
    (0, _gatsbyNode.onCreatePage)({
      page: {
        path: '/404',
        context: {}
      },
      actions: actions
    }, {});
    expect(actions.deletePage).not.toHaveBeenCalled();
    expect(actions.createPage).not.toHaveBeenCalled();
  });
  it('should generate crumbs with trailingSlashes', function () {
    (0, _gatsbyNode.onCreatePage)({
      page: mockPageLongPath,
      actions: actions
    }, {
      useAutoGen: true,
      trailingSlashes: true
    });
    expect(actions.deletePage).toHaveBeenCalledTimes(1);
    expect(actions.deletePage).toHaveBeenCalledWith(mockPageLongPath);
    expect(actions.createPage).toHaveBeenCalledTimes(1);
    expect(actions.createPage).toHaveBeenCalledWith(calledWithTrailingSlashes);
  });
  it('should generate crumbs with trailingSlashes and label updates', function () {
    (0, _gatsbyNode.onCreatePage)({
      page: mockPageLongPath,
      actions: actions
    }, {
      useAutoGen: true,
      trailingSlashes: true,
      crumbLabelUpdates: [{
        pathname: '/long',
        crumbLabel: 'LONG'
      }]
    });
    expect(actions.deletePage).toHaveBeenCalledTimes(1);
    expect(actions.deletePage).toHaveBeenCalledWith(mockPageLongPath);
    expect(actions.createPage).toHaveBeenCalledTimes(1);
    expect(actions.createPage).toHaveBeenCalledWith(calledWithTrailingSlashesLabelUpdates);
  });
  it('should generate crumbs with trailingSlashes, no trailing slash on html extension', function () {
    (0, _gatsbyNode.onCreatePage)({
      page: mockPathHTML,
      actions: actions
    }, {
      useAutoGen: true,
      trailingSlashes: true,
      crumbLabelUpdates: [{
        pathname: '/long',
        crumbLabel: 'LONG'
      }]
    });
    expect(actions.deletePage).toHaveBeenCalledTimes(1);
    expect(actions.deletePage).toHaveBeenCalledWith(mockPathHTML);
    expect(actions.createPage).toHaveBeenCalledTimes(1);
    expect(actions.createPage).toHaveBeenCalledWith(calledWithTrailingSlashesLabelUpdatesHTMLExt);
  });
});