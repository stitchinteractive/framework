"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _Breadcrumb = _interopRequireDefault(require("./Breadcrumb"));
var _optionsContext = require("./options-context");
var _breadcrumbContext = require("./breadcrumb-context");
var Separator = function Separator() {
  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("span", null, "/"));
};
var props = {
  breadcrumb: {
    crumbs: [{
      crumbLabel: 'Home',
      pathname: '/'
    }, {
      crumbLabel: 'long',
      pathname: '/long'
    }, {
      crumbLabel: 'test',
      pathname: '/long/test'
    }],
    location: '/long/test'
  },
  crumbLabel: 'testLabel',
  crumbSeparator: ' - ',
  crumbSeparatorComponent: /*#__PURE__*/_react.default.createElement(Separator, null),
  title: 'Breadcrumb'
};
var useAutoGen = true;
var usePathPrefix = null;
afterEach(_react2.cleanup);
describe('Breadcrumb Click Tracking', function () {
  it('Should Render autogen breadcrumb', function () {
    var _render = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_optionsContext.OptionsProvider, {
        useAutoGen: useAutoGen,
        usePathPrefix: usePathPrefix
      }, /*#__PURE__*/_react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
        defaultCrumb: null
      }, /*#__PURE__*/_react.default.createElement(_Breadcrumb.default, {
        title: props.title,
        crumbs: props.breadcrumb.crumbs,
        crumbLabel: props.crumbLabel,
        crumbSeparator: props.crumbSeparatorComponent
      })))),
      getByText = _render.getByText;
    expect(getByText('Home')).toBeTruthy();
    expect(getByText('long')).toBeTruthy();
    expect(getByText('testLabel')).toBeTruthy();
    expect(getByText('Breadcrumb')).toBeTruthy();
  });
  it('Should Render autogen breadcrumb with no title', function () {
    var _render2 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_optionsContext.OptionsProvider, {
        useAutoGen: useAutoGen,
        usePathPrefix: usePathPrefix
      }, /*#__PURE__*/_react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
        defaultCrumb: null
      }, /*#__PURE__*/_react.default.createElement(_Breadcrumb.default, {
        crumbs: props.breadcrumb.crumbs,
        crumbLabel: props.crumbLabel,
        crumbSeparator: props.crumbSeparator
      })))),
      getByText = _render2.getByText,
      queryByText = _render2.queryByText;
    expect(getByText('Home')).toBeTruthy();
    expect(getByText('long')).toBeTruthy();
    expect(getByText('testLabel')).toBeTruthy();
    expect(queryByText('Breadcrumb')).toBeNull();
  });
  it('Should render autogen breadcrumb, with disabled long crumb', function () {
    var _render3 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_optionsContext.OptionsProvider, {
        useAutoGen: useAutoGen,
        usePathPrefix: usePathPrefix
      }, /*#__PURE__*/_react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
        defaultCrumb: null
      }, /*#__PURE__*/_react.default.createElement(_Breadcrumb.default, {
        title: props.title,
        crumbs: props.breadcrumb.crumbs,
        crumbLabel: props.crumbLabel,
        crumbSeparator: props.crumbSeparator,
        disableLinks: ['/long']
      })))),
      container = _render3.container,
      getByText = _render3.getByText;
    expect(getByText('Home')).toBeTruthy();
    expect(getByText('long')).toBeTruthy();
    expect(getByText('testLabel')).toBeTruthy();
    expect(getByText('Breadcrumb')).toBeTruthy();
    expect(container.querySelectorAll('a')).toHaveLength(2);
  });
  it('Should render autogen breadcrumb, with long crumb hidden', function () {
    var _render4 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_optionsContext.OptionsProvider, {
        useAutoGen: useAutoGen,
        usePathPrefix: usePathPrefix
      }, /*#__PURE__*/_react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
        defaultCrumb: null
      }, /*#__PURE__*/_react.default.createElement(_Breadcrumb.default, {
        title: props.title,
        crumbs: props.breadcrumb.crumbs,
        crumbLabel: props.crumbLabel,
        crumbSeparator: props.crumbSeparator,
        hiddenCrumbs: ['/long']
      })))),
      container = _render4.container,
      getByText = _render4.getByText,
      queryByText = _render4.queryByText;
    expect(getByText('Home')).toBeTruthy();
    expect(queryByText('long')).toBeNull();
    expect(getByText('testLabel')).toBeTruthy();
    expect(getByText('Breadcrumb')).toBeTruthy();
    expect(container.querySelectorAll('a')).toHaveLength(2);
  });
  it('Should Render autogen breadcrumb using class names', function () {
    var _render5 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_optionsContext.OptionsProvider, {
        useAutoGen: useAutoGen,
        usePathPrefix: usePathPrefix
      }, /*#__PURE__*/_react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
        defaultCrumb: null
      }, /*#__PURE__*/_react.default.createElement(_Breadcrumb.default, {
        title: props.title,
        crumbs: props.breadcrumb.crumbs,
        crumbLabel: props.crumbLabel,
        crumbSeparator: props.crumbSeparator
      })))),
      container = _render5.container,
      getByText = _render5.getByText;
    expect(getByText('Home')).toBeTruthy();
    expect(getByText('long')).toBeTruthy();
    expect(getByText('Breadcrumb')).toBeTruthy();
    expect(getByText('testLabel')).toBeTruthy();
    container.querySelectorAll('a').forEach(function (a) {
      return expect(a.getAttribute('style')).toBeNull();
    });
  });
  it('Should Render autogen breadcrumb using class names, with disabled links', function () {
    var _render6 = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_optionsContext.OptionsProvider, {
        useAutoGen: useAutoGen,
        usePathPrefix: usePathPrefix
      }, /*#__PURE__*/_react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
        defaultCrumb: null
      }, /*#__PURE__*/_react.default.createElement(_Breadcrumb.default, {
        title: props.title,
        crumbs: props.breadcrumb.crumbs,
        crumbLabel: props.crumbLabel,
        crumbSeparator: props.crumbSeparator,
        disableLinks: ['/long']
      })))),
      container = _render6.container,
      getByText = _render6.getByText;
    expect(getByText('Home')).toBeTruthy();
    expect(getByText('long')).toBeTruthy();
    expect(getByText('Breadcrumb')).toBeTruthy();
    expect(getByText('testLabel')).toBeTruthy();
    container.querySelectorAll('a').forEach(function (a) {
      return expect(a.getAttribute('style')).toBeNull();
    });
  });
});