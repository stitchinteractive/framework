"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
// import wcmatch from 'wildcard-match'
var wcmatch = require('wildcard-match');
exports.onCreateBabelConfig = function (_ref) {
  var actions = _ref.actions;
  actions.setBabelPreset({
    name: 'babel-preset-gatsby',
    options: {
      browser: true
    }
  });
};
exports.onCreatePage = function (_ref2, pluginOptions) {
  var page = _ref2.page,
    pathPrefix = _ref2.pathPrefix,
    actions = _ref2.actions;
  if (pluginOptions.useAutoGen) {
    var createPage = actions.createPage,
      deletePage = actions.deletePage;
    var defaultOptions = {
      trailingSlashes: false,
      exclude: [],
      excludeOptions: {
        separator: true
      }
    };
    var optionsActual = (0, _extends2.default)({}, defaultOptions, pluginOptions);
    var _optionsActual$crumbL = optionsActual.crumbLabelUpdates,
      crumbLabelUpdates = _optionsActual$crumbL === void 0 ? [] : _optionsActual$crumbL,
      trailingSlashes = optionsActual.trailingSlashes,
      exclude = optionsActual.exclude,
      excludeOptions = optionsActual.excludeOptions;

    // for pages not excludecd, create crumbs out of each section of the page path
    var isMatch = wcmatch(exclude, excludeOptions);
    if (!isMatch(page.path)) {
      var acc = '';
      var crumbs = [];
      var pathname = '';
      var splitUrl = pathPrefix ? page.path.replace(new RegExp("^" + pathPrefix), '').split('/') : page.path.split('/');
      splitUrl.forEach(function (split, index) {
        if (index === 0 && split === '') {
          // root or 'home' section of path
          crumbs = [].concat(crumbs, [{
            pathname: '/',
            crumbLabel: optionsActual.autoGenHomeLabel || 'Home'
          }]);
        } else if (index !== 0 && split !== '') {
          // remaining sections of path
          acc += "/" + split;

          // update crumbLabel for any crumbLabelUpdates otherwise use path
          var crumbLabel = split;
          crumbLabelUpdates.forEach(function (labelUpdate) {
            if (labelUpdate.pathname === acc) {
              crumbLabel = labelUpdate.crumbLabel;
            }
          });

          // if trailingSlashes add a trailing slash to the end of
          // each crumb. Excluding root (/) and crumbs including a "." (ex: 404.html)
          if (trailingSlashes && index !== 0 && acc.indexOf('.') === -1) {
            pathname = acc + "/";
          } else {
            pathname = acc;
          }
          crumbs = [].concat(crumbs, [{
            pathname: pathname,
            crumbLabel: crumbLabel
          }]);
        } else {
          // catch empty path sections
          crumbs = [].concat(crumbs);
        }
      });
      var breadcrumb = {
        location: page.path,
        crumbs: crumbs
      };

      // inject breadcrumbs into page context
      var oldPageContext = page.context;
      deletePage(page);
      createPage((0, _extends2.default)({}, page, {
        context: (0, _extends2.default)({}, oldPageContext, {
          breadcrumb: breadcrumb
        })
      }));
    }
  }
};